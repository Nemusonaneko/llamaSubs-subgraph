// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddSub extends ethereum.Event {
  get params(): AddSub__Params {
    return new AddSub__Params(this);
  }
}

export class AddSub__Params {
  _event: AddSub;

  constructor(event: AddSub) {
    this._event = event;
  }

  get subNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get costOfSub(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class AddWhitelist extends ethereum.Event {
  get params(): AddWhitelist__Params {
    return new AddWhitelist__Params(this);
  }
}

export class AddWhitelist__Params {
  _event: AddWhitelist;

  constructor(event: AddWhitelist) {
    this._event = event;
  }

  get toAdd(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Extend extends ethereum.Event {
  get params(): Extend__Params {
    return new Extend__Params(this);
  }
}

export class Extend__Params {
  _event: Extend;

  constructor(event: Extend) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sub(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get expires(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get cost(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RemoveSub extends ethereum.Event {
  get params(): RemoveSub__Params {
    return new RemoveSub__Params(this);
  }
}

export class RemoveSub__Params {
  _event: RemoveSub;

  constructor(event: RemoveSub) {
    this._event = event;
  }

  get subNumber(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RemoveWhitelist extends ethereum.Event {
  get params(): RemoveWhitelist__Params {
    return new RemoveWhitelist__Params(this);
  }
}

export class RemoveWhitelist__Params {
  _event: RemoveWhitelist;

  constructor(event: RemoveWhitelist) {
    this._event = event;
  }

  get toRemove(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Subscribe extends ethereum.Event {
  get params(): Subscribe__Params {
    return new Subscribe__Params(this);
  }
}

export class Subscribe__Params {
  _event: Subscribe;

  constructor(event: Subscribe) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sub(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get expires(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get cost(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LlamaSubsFlatRateERC20NonRefundable__subsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: i32, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getCostOfSub(): BigInt {
    return this.value0;
  }

  getDuration(): BigInt {
    return this.value1;
  }

  getDisabled(): i32 {
    return this.value2;
  }

  getToken(): Address {
    return this.value3;
  }
}

export class LlamaSubsFlatRateERC20NonRefundable extends ethereum.SmartContract {
  static bind(address: Address): LlamaSubsFlatRateERC20NonRefundable {
    return new LlamaSubsFlatRateERC20NonRefundable(
      "LlamaSubsFlatRateERC20NonRefundable",
      address
    );
  }

  balanceOf(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(owners: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  expiration(id: BigInt): BigInt {
    let result = super.call("expiration", "expiration(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_expiration(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiration", "expiration(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  newExpires(param0: BigInt): BigInt {
    let result = super.call("newExpires", "newExpires(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_newExpires(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("newExpires", "newExpires(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numOfSubs(): BigInt {
    let result = super.call("numOfSubs", "numOfSubs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numOfSubs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numOfSubs", "numOfSubs():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subs(param0: BigInt): LlamaSubsFlatRateERC20NonRefundable__subsResult {
    let result = super.call(
      "subs",
      "subs(uint256):(uint208,uint40,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LlamaSubsFlatRateERC20NonRefundable__subsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_subs(
    param0: BigInt
  ): ethereum.CallResult<LlamaSubsFlatRateERC20NonRefundable__subsResult> {
    let result = super.tryCall(
      "subs",
      "subs(uint256):(uint208,uint40,uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LlamaSubsFlatRateERC20NonRefundable__subsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uri(id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_uri(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  whitelist(param0: Address): BigInt {
    let result = super.call("whitelist", "whitelist(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_whitelist(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("whitelist", "whitelist(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddSubsCall extends ethereum.Call {
  get inputs(): AddSubsCall__Inputs {
    return new AddSubsCall__Inputs(this);
  }

  get outputs(): AddSubsCall__Outputs {
    return new AddSubsCall__Outputs(this);
  }
}

export class AddSubsCall__Inputs {
  _call: AddSubsCall;

  constructor(call: AddSubsCall) {
    this._call = call;
  }

  get _subs(): Array<AddSubsCall_subsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddSubsCall_subsStruct
    >();
  }
}

export class AddSubsCall__Outputs {
  _call: AddSubsCall;

  constructor(call: AddSubsCall) {
    this._call = call;
  }
}

export class AddSubsCall_subsStruct extends ethereum.Tuple {
  get costOfSub(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get token(): Address {
    return this[2].toAddress();
  }
}

export class AddWhitelistCall extends ethereum.Call {
  get inputs(): AddWhitelistCall__Inputs {
    return new AddWhitelistCall__Inputs(this);
  }

  get outputs(): AddWhitelistCall__Outputs {
    return new AddWhitelistCall__Outputs(this);
  }
}

export class AddWhitelistCall__Inputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }

  get _toAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhitelistCall__Outputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ExtendCall extends ethereum.Call {
  get inputs(): ExtendCall__Inputs {
    return new ExtendCall__Inputs(this);
  }

  get outputs(): ExtendCall__Outputs {
    return new ExtendCall__Outputs(this);
  }
}

export class ExtendCall__Inputs {
  _call: ExtendCall;

  constructor(call: ExtendCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExtendCall__Outputs {
  _call: ExtendCall;

  constructor(call: ExtendCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subs(): Array<InitializeCall_subsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      InitializeCall_subsStruct
    >();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_subsStruct extends ethereum.Tuple {
  get costOfSub(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get token(): Address {
    return this[2].toAddress();
  }
}

export class RemoveSubsCall extends ethereum.Call {
  get inputs(): RemoveSubsCall__Inputs {
    return new RemoveSubsCall__Inputs(this);
  }

  get outputs(): RemoveSubsCall__Outputs {
    return new RemoveSubsCall__Outputs(this);
  }
}

export class RemoveSubsCall__Inputs {
  _call: RemoveSubsCall;

  constructor(call: RemoveSubsCall) {
    this._call = call;
  }

  get _subs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RemoveSubsCall__Outputs {
  _call: RemoveSubsCall;

  constructor(call: RemoveSubsCall) {
    this._call = call;
  }
}

export class RemoveWhitelistCall extends ethereum.Call {
  get inputs(): RemoveWhitelistCall__Inputs {
    return new RemoveWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistCall__Outputs {
    return new RemoveWhitelistCall__Outputs(this);
  }
}

export class RemoveWhitelistCall__Inputs {
  _call: RemoveWhitelistCall;

  constructor(call: RemoveWhitelistCall) {
    this._call = call;
  }

  get _toRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelistCall__Outputs {
  _call: RemoveWhitelistCall;

  constructor(call: RemoveWhitelistCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get _subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sub(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
